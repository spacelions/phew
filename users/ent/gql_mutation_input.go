// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreatePhoneInput represents a mutation input for creating phones.
type CreatePhoneInput struct {
	CreateTime  *time.Time
	UpdateTime  *time.Time
	Number      string
	CountryCode *string
	UserID      *int
}

// Mutate applies the CreatePhoneInput on the PhoneMutation builder.
func (i *CreatePhoneInput) Mutate(m *PhoneMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetNumber(i.Number)
	if v := i.CountryCode; v != nil {
		m.SetCountryCode(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the CreatePhoneInput on the PhoneCreate builder.
func (c *PhoneCreate) SetInput(i CreatePhoneInput) *PhoneCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Username   string
	Age        int
	PhoneID    *int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetUsername(i.Username)
	m.SetAge(i.Age)
	if v := i.PhoneID; v != nil {
		m.SetPhoneID(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}
